#Importing the libraries to plot pixels in the canvas
from PIL import Image
import numpy as np

#Total number of pixels generated in the image
n=512 

#creating an image with size nxn pixels and creating a numpy array whose values are similar to the image created above
im = Image.new('RGB', (n, n))    
imgin = np.array(im)             

#A similar temporary array and image is created as same as original image
tempoin = Image.new('RGB', (n, n))
t=np.array(tempoin)

#Initially all pixels are black in the image. 
##Since, from 0-255:- '0' value is defined for bloac pixel we are creating a black pixel by (0,0,0)
for i in range(n):
  for j in range(n):
    imgin[i][j]=(0,0,0)

#The IFS Given for the following code is as given below:
a=[0,0.5,0.5]
b=[-0.5,0,0]
c=[0.5,0,0]
d=[0,0.5,0.5]
e=[0.5,0,0.5]
f=[0.5,0,0]

#Making a Square for all the boundary pixels. By making its pixel value(255,255,255) Which means white color
#After this loop there will be a single square; by making all the boundary pixel values as white let this as 'A0'
for i in range(0,n):
  t[i, 0] = (255,255,255)
  t[0, i] = (255,255,255)
  t[n-1, i] = (255,255,255)
  t[i, n-1] = (255,255,255)

#Now we will define a method/ function
#Method/function to generate fractal for each iteration by transformation
#Starting from the initial set A0  it will compute the sequence of sets generated by the function
def fractal_gen(t,imgin,iterate):
  for iter in range(0,iterate):
    #Displaying the number of iteration it takes
    print('iteration:' +str(iter))
    for i in range(0,n):
      for j in range(0,n):
        if t[i,j,0] == 255:
      
          #Applying 'W' to the initial set having variable 'imgin' i.e, A0 to make A(n+1) in the array imgin(i,j)
          imgin[(int)(a[0]*i + b[0]*j + e[0]*n), (int)(c[0]*i + d[0]*j + f[0]*n)]=(255,255,255)
          imgin[(int)(a[1]*i + b[1]*j + e[1]*n), (int)(c[1]*i + d[1]*j + f[1]*n)]=(255,255,255)
          imgin[(int)(a[2]*i + b[2]*j + e[2]*n), (int)(c[2]*i + d[2]*j + f[2]*n)]=(255,255,255)
    
    #Now putting all the generated values in the temporary array which was declared at the initial stage as "t"
    for k in range(0,n):
      for m in range(0,n):
        t[k,m]=imgin[k,m]
        #After putting the values into the temporary array, we are resetting the pixel in the original image i.e, screen
        imgin[k,m]=(0,0,0)
        #Since, WKT (0,0,0) Pixels are associated for black pixel we are using it to rest the screen
  
  new_im = Image.fromarray(t)
  new_im.save('Deterministic15.jpg')
  #After the final interation gets completed; 
  #then the fractal which we are supposed to produce is saved in the file named 'Fractal.jpg'

#We are calling the Method for generating the fractal. Since, we need to declare the method before calling it.
fractal_gen(t,imgin,15)
#Here the fractal is generated after completing 15 iterations successfully.

#The most awaited Fractal is now saved in the file named: Fractal.jpg 
     